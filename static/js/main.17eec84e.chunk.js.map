{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","App","useState","matchMedia","matches","theme","setTheme","useEffect","modeListener","event","addEventListener","removeEventListener","styles","COLORS","css","textRendering","fontKerning","MozOsxFontSmoothing","onClick","background","margin","ReactDOM","render","StrictMode","html","height","body","fontFamily","lineHeight","padding","color","a","boxSizing","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6IAYoBA,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,gECT1B,SAASC,IAAO,IAAD,EACKC,mBACzBL,OAAOM,WAAW,gCAAgCC,QAAU,OAAS,SAFjD,mBACdC,EADc,KACPC,EADO,KAoBrB,OAfAC,qBAAU,WACT,IAAMC,EAAe,SAACC,GACjBA,EAAML,QACTE,EAAS,QAETA,EAAS,UAKX,OAFAT,OAAOM,WAAW,gCAAgCO,iBAAiB,SAAUF,GAEtEX,OACLM,WAAW,gCACXQ,oBAAoB,SAAUH,KAC9B,IAGF,YAAC,WAAD,KACC,YAAC,IAAD,CACCI,OAAQ,CACP,QAAQ,eACJC,EAAOR,OAIb,oBACCS,IAAK,CACJC,cAAe,qBACfC,YAAa,OACbC,oBAAqB,cAJvB,cAQC,sBACCC,QAAS,kBAAMZ,EAAmB,UAAVD,EAAoB,OAAS,UACrDS,IAAK,CACJK,WAAY,gBACZC,OAAQ,SAJV,kBCvCJC,IAASC,OACR,eAAC,IAAMC,WAAP,WACC,cAAC,IAAD,CACCX,OAAQ,CACPY,KAAM,CACLC,OAAQ,QAETC,KAAM,CACLC,WACC,uLACDC,WAAY,IACZR,OAAQ,EACRS,QAAS,EACTC,MAAO,cACPX,WAAY,aAEbY,EAAG,CACFD,MAAO,eAER,uBAAwB,CACvBE,UAAW,iBAId,cAAC/B,EAAD,OAEDgC,SAASC,eAAe,SF+FpB,kBAAmBC,WACtBA,UAAUC,cAAcC,MACtBC,MAAK,SAACC,GACNA,EAAaC,gBAEbC,OAAM,SAACC,GACPC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.17eec84e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","/** @jsxRuntime classic */\n/** @jsx jsx */\n\nimport { jsx, Global } from '@emotion/core';\nimport { Fragment, useState, useEffect } from 'react';\n\nimport COLORS from './tokens/colors.json';\n\nexport function App() {\n\tconst [theme, setTheme] = useState(\n\t\twindow.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\n\t);\n\n\tuseEffect(() => {\n\t\tconst modeListener = (event) => {\n\t\t\tif (event.matches) {\n\t\t\t\tsetTheme('dark');\n\t\t\t} else {\n\t\t\t\tsetTheme('light');\n\t\t\t}\n\t\t};\n\t\twindow.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', modeListener);\n\n\t\treturn window\n\t\t\t.matchMedia('(prefers-color-scheme: dark)')\n\t\t\t.removeEventListener('change', modeListener);\n\t}, []);\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Global\n\t\t\t\tstyles={{\n\t\t\t\t\t':root': {\n\t\t\t\t\t\t...COLORS[theme],\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<main\n\t\t\t\tcss={{\n\t\t\t\t\ttextRendering: 'optimizeLegibility',\n\t\t\t\t\tfontKerning: 'auto',\n\t\t\t\t\tMozOsxFontSmoothing: 'grayscale',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tHello world\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}\n\t\t\t\t\tcss={{\n\t\t\t\t\t\tbackground: 'var(--action)',\n\t\t\t\t\t\tmargin: '1rem',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tSwitch theme\n\t\t\t\t</button>\n\t\t\t</main>\n\t\t</Fragment>\n\t);\n}\n","import * as serviceWorker from './serviceWorker';\nimport { Global } from '@emotion/core';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport React from 'react';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Global\n\t\t\tstyles={{\n\t\t\t\thtml: {\n\t\t\t\t\theight: '100%',\n\t\t\t\t},\n\t\t\t\tbody: {\n\t\t\t\t\tfontFamily:\n\t\t\t\t\t\t'system-ui,-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\"',\n\t\t\t\t\tlineHeight: 1.2,\n\t\t\t\t\tmargin: 0,\n\t\t\t\t\tpadding: 0,\n\t\t\t\t\tcolor: 'var(--text)',\n\t\t\t\t\tbackground: 'var(--bg)',\n\t\t\t\t},\n\t\t\t\ta: {\n\t\t\t\t\tcolor: 'var(--text)',\n\t\t\t\t},\n\t\t\t\t'*, *:before, *:after': {\n\t\t\t\t\tboxSizing: 'border-box',\n\t\t\t\t},\n\t\t\t}}\n\t\t/>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}